// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std; 

int maxCities(vector<vector<char>> &a, int n, int m);


//https://practice.geeksforgeeks.org/contest-problem/03b18010a36da74341d7e3705b7d2173bbf67945/1/

// Driver code to test above functions
int main()
{

    
    int t;
    cin >> t;
    while(t--)
    {
        int n, m;
        cin >> n >> m;

        vector<vector<char>> a(n, vector<char>(m));

        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < m; ++j)
            {
                cin >> a[i][j];
            }
        }

        cout << maxCities(a, n, m) << "\n";

    }


    return 0; 
}// } Driver Code Ends


int DFS(vector<vector<char>> &a, int n, int m,int i, int j,int &count)
{
    a[i][j]='+';
    count++;
    if(i-1>=0 && a[i-1][j]=='-')
        DFS(a,n,m,i-1,j,count);
    if(i+1<n && a[i+1][j]=='-')
        DFS(a,n,m,i+1,j,count);
    if(j-1>=0 && a[i][j-1]=='-')
        DFS(a,n,m,i,j-1,count);
    if(j+1<m && a[i][j+1]=='-')
        DFS(a,n,m,i,j+1,count);
    if(i-1>=0 && j-1>=0 && a[i-1][j-1]=='-')
        DFS(a,n,m,i-1,j-1,count);
    if(i-1>=0 && j+1<m && a[i-1][j+1]=='-')
        DFS(a,n,m,i-1,j+1,count);
    if(i+1<n && j-1>=0 && a[i+1][j-1]=='-')
        DFS(a,n,m,i+1,j-1,count);
    if(i+1<n && j+1<m && a[i+1][j+1]=='-')
        DFS(a,n,m,i+1,j+1,count);
    return count;
}
int maxCities(vector<vector<char>> &a, int n, int m)
{
    // Your code goes here

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(a[i][j]=='*')
            {
                if(j-1>=0  && (a[i][j-1]!='*'))
                {
                     a[i][j-1]='-';
                }
                if(j+1<m  && (a[i][j+1]!='*'))
                {
                     a[i][j+1]='-';
                }
                if(i-1>=0)
                {
                    if((a[i-1][j]!='*'))
                    {   
                        a[i-1][j]='-';
                    }
                    if(j-1>=0  && (a[i-1][j-1]!='*'))
                    {
                        a[i-1][j-1]='-';
                    }
                    if(j+1<m  && (a[i-1][j+1]!='*'))
                    {
                        a[i-1][j+1]='-';
                    }
                }
                
                if(i+1<n)
                {
                    if((a[i+1][j]!='*'))
                    {
                        a[i+1][j]='-';
                    }
                    if(j-1>=0  && (a[i+1][j-1]!='*'))
                    {
                        a[i+1][j-1]='-';
                    }
                    if(j+1<m  && (a[i+1][j+1]!='*'))
                    {
        
                        a[i+1][j+1]='-';
                    }
                }
                
            }
                
        }
    }
    int maxr=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {   
            int res=0;
            if(a[i][j]=='-')
            {
                res= DFS(a,n,m,i,j,res);
                if(res>maxr)
                    maxr=res;
            }
        }
    }
   return maxr;
}
